<div>import os<br/>import sys<br/>import random<br/>from datetime import datetime<br/>from os import execl<br/>from telethon import TelegramClient, events<br/>from telethon.sessions import StringSession<br/>from telethon.tl.functions.account import UpdateProfileRequest<div></div><br/>from telethon.errors import (<br/>    ChannelInvalidError,<br/>    ChannelPrivateError,<br/>    ChannelPublicGroupNaError,<br/>)<br/>from telethon.tl import functions<br/>from telethon.tl.functions.channels import GetFullChannelRequest<br/>from telethon.tl.functions.messages import GetFullChatRequest<div></div><br/>from Config import STRING, SUDO, BIO_MESSAGE, ALIVE_NAME, API_ID, API_HASH, STRING2, STRING3, STRING4 ,STRING5, STRING6, STRING7, STRING8 ,STRING9, STRING10, STRING11, STRING12 , STRING13 , STRING14 , STRING15 ,STRING16 , STRING17 , STRING18 , STRING19 , STRING20 , STRING21 , STRING22 , STRING23 , STRING24 , STRING25 , STRING26 , STRING27 , STRING28 , STRING29 , STRING30<br/>import asyncio<br/>import telethon.utils<br/>from telethon.tl import functions<br/>from telethon.tl.functions.channels import LeaveChannelRequest<br/>from telethon.tl.functions.messages import ImportChatInviteRequest<br/>from Utils import RAID, RRAID<div></div><br/>a = API_ID<br/>b = API_HASH<br/>smex = STRING<br/>smexx = STRING2<br/>smexxx = STRING3<br/>smexxxx = STRING4<br/>smexxxxx = STRING5<br/>sixth = STRING6<br/>seven = STRING7<br/>eight = STRING8<br/>ninth = STRING9<br/>tenth = STRING10<br/>eleve = STRING11<br/>twelv = STRING12<br/>thirt = STRING13<br/>forte = STRING14<br/>fifth = STRING15<br/>sieee = STRING16<br/>seeee = STRING17<br/>eieee = STRING18<br/>nieee = STRING19<br/>gandu = STRING20<br/>ekish = STRING21<br/>baish = STRING22<br/>teish = STRING23<br/>tfour = STRING24<br/>tfive = STRING25<br/>tsix = STRING26<br/>tseven = STRING27<br/>teight = STRING28<br/>tnine = STRING29<br/>thirty = STRING30<div></div><div></div>idk = ""<br/>ydk = ""<br/>wdk = ""<br/>sdk = ""<br/>hdk = ""<br/>adk = ""<br/>bdk = ""<br/>cdk = ""<br/>edk = ""<br/>ddk = ""<br/>vkk = ""<br/>kkk = ""<br/>lkk = ""<br/>mkk = ""<br/>sid = ""<br/>shy = ""<br/>aan = ""<br/>ake = ""<br/>eel = ""<br/>khu = ""<br/>shi = ""<br/>yaa = ""<br/>dav = ""<br/>raj = ""<br/>put = ""<br/>eag = ""<br/>gle = ""<br/>wal = ""<br/>aaa = ""<br/>boy = ""<div></div><div></div>que = {}<div></div>SMEX_USERS = []<br/>for x in SUDO: <br/>    SMEX_USERS.append(x)<br/>    <br/>async def start_yukki():<br/>    global idk<br/>    global ydk<br/>    global wdk<br/>    global sdk<br/>    global hdk<br/>    global adk<br/>    global bdk<br/>    global cdk<br/>    global ddk<br/>    global edk<br/>    global vkk<br/>    global kkk<br/>    global lkk<br/>    global mkk<br/>    global sid<br/>    global shy<br/>    global aan<br/>    global ake<br/>    global eel<br/>    global khu<br/>    global shi<br/>    global yaa<br/>    global dav<br/>    global raj<br/>    global put<br/>    global eag<br/>    global gle<br/>    global wal<br/>    global aaa<br/>    global boy<br/>    if smex:<br/>        session_name = str(smex)<br/>        print("String 1 Found")<br/>        idk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 1")<br/>            await idk.start()<br/>            botme = await idk.get_me()<br/>            await idk(functions.channels.JoinChannelRequest(channel=""))<br/>            await idk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await idk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await idk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await idk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 1 not Found")<br/>        session_name = "startup"<br/>        idk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await idk.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if smexx:<br/>        session_name = str(smexx)<br/>        print("String 2 Found")<br/>        ydk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 2")<br/>            await ydk.start()<br/>            await ydk(functions.channels.JoinChannelRequest(channel=""))<br/>            await ydk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await ydk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await ydk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await ydk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await ydk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 2 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        ydk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await ydk.start()<br/>        except Exception as e:<br/>            pass<div></div>    if smexxx:<br/>        session_name = str(smexxx)<br/>        print("String 3 Found")<br/>        wdk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 3")<br/>            await  wdk.start()<br/>            await wdk(functions.channels.JoinChannelRequest(channel=""))<br/>            await wdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await wdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await wdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await wdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await wdk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 3 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        wdk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await wdk.start()<br/>        except Exception as e:<br/>            pass<div></div>    if smexxxx:<br/>        session_name = str(smexxxx)<br/>        print("String 4 Found")<br/>        hdk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 4")<br/>            await hdk.start()<br/>            await hdk(functions.channels.JoinChannelRequest(channel=""))<br/>            await hdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await hdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await hdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            <br/>            await hdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await hdk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 4 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        hdk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await hdk.start()<br/>        except Exception as e:<br/>            pass<div></div>    if smexxxxx:<br/>        session_name = str(smexxxxx)<br/>        print("String 5 Found")<br/>        sdk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 5")<br/>            await sdk.start()<br/>            await sdk(functions.channels.JoinChannelRequest(channel=""))<br/>            await sdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await sdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await sdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await sdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await sdk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 5 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        sdk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await sdk.start()<br/>        except Exception as e:<br/>            pass<br/>                  <br/>    if sixth:<br/>        session_name = str(sixth)<br/>        print("String 6 Found")<br/>        adk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 6")<br/>            await adk.start()<br/>            await adk(functions.channels.JoinChannelRequest(channel=""))<br/>            await adk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await adk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await adk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await adk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await adk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 6 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        adk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await adk.start()<br/>        except Exception as e:<br/>            pass<div></div>    if seven:<br/>        session_name = str(seven)<br/>        print("String 7 Found")<br/>        bdk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 7")<br/>            await bdk.start()<br/>            await bdk(functions.channels.JoinChannelRequest(channel=""))<br/>            await bdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await bdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await bdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await bdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await bdk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 7 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        bdk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await bdk.start()<br/>        except Exception as e:<br/>            pass    <br/>        <br/>    <br/>    if eight:<br/>        session_name = str(eight)<br/>        print("String 8 Found")<br/>        cdk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 8")<br/>            await cdk.start()<br/>            await cdk(functions.channels.JoinChannelRequest(channel=""))<br/>            await cdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await cdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await cdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await cdk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await cdk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 8 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        cdk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await cdk.start()<br/>        except Exception as e:<br/>            pass   <br/>        <br/>    if ninth:<br/>        session_name = str(ninth)<br/>        print("String 9 Found")<br/>        ddk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 9")<br/>            await ddk.start()<br/>            await ddk(functions.channels.JoinChannelRequest(channel=""))<br/>            await ddk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await ddk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await ddk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await ddk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await ddk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 9 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        ddk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await ddk.start()<br/>        except Exception as e:<br/>            pass   <br/>    <br/>  <br/>    if tenth:<br/>        session_name = str(tenth)<br/>        print("String 10 Found")<br/>        edk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 10")<br/>            await edk.start()<br/>            await edk(functions.channels.JoinChannelRequest(channel=""))<br/>            await edk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await edk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await edk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await edk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await edk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 10 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        edk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await edk.start()<br/>        except Exception as e:<br/>            pass <br/>        <br/>    <br/>    if eleve:<br/>        session_name = str(eleve)<br/>        print("String 11 Found")<br/>        vkk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 11")<br/>            await vkk.start()<br/>            await vkk(functions.channels.JoinChannelRequest(channel=""))<br/>            await vkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await vkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await vkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await vkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await vkk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 11 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        vkk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await vkk.start()<br/>        except Exception as e:<br/>            pass<br/>        <br/>    <br/>    if twelv:<br/>        session_name = str(twelv)<br/>        print("String 12 Found")<br/>        kkk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 12")<br/>            await kkk.start()<br/>            await kkk(functions.channels.JoinChannelRequest(channel=""))<br/>            await kkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await kkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await kkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await kkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await kkk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 12 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        kkk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await kkk.start()<br/>        except Exception as e:<br/>            pass   <br/>    <br/>  <br/>    if thirt:<br/>        session_name = str(thirt)<br/>        print("String 13  Found")<br/>        lkk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 13")<br/>            await lkk.start()<br/>            await lkk(functions.channels.JoinChannelRequest(channel=""))<br/>            await lkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await lkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await lkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await lkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await lkk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 13 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        lkk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await lkk.start()<br/>        except Exception as e:<br/>            pass <br/>        <br/>    <br/>    if forte:<br/>        session_name = str(forte)<br/>        print("String 14 Found")<br/>        mkk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 14")<br/>            await mkk.start()<br/>            await mkk(functions.channels.JoinChannelRequest(channel=""))<br/>            await mkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await mkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await mkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await mkk(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await mkk.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 14 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        mkk = TelegramClient(session_name, a, b)<br/>        try:<br/>            await mkk.start()<br/>        except Exception as e:<br/>            pass<br/>        <br/>    <br/>    if fifth:<br/>        session_name = str(fifth)<br/>        print("String 15 Found")<br/>        sid = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 15")<br/>            await sid.start()<br/>            await sid(functions.channels.JoinChannelRequest(channel=""))<br/>            await sid(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await sid(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await sid(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await sid(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await sid.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 15 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        sid = TelegramClient(session_name, a, b)<br/>        try:<br/>            await sid.start()<br/>        except Exception as e:<br/>            pass<div></div><br/>    if sieee:<br/>        session_name = str(sieee)<br/>        print("String 16 Found")<br/>        shy = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 16")<br/>            await shy.start()<br/>            botme = await shy.get_me()<br/>            await shy(functions.channels.JoinChannelRequest(channel=""))<br/>            await shy(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await shy(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await shy(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await shy(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 16 not Found")<br/>        session_name = "startup"<br/>        shy = TelegramClient(session_name, a, b)<br/>        try:<br/>            await shy.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if seeee:<br/>        session_name = str(seeee)<br/>        print("String 17 Found")<br/>        aan = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 17")<br/>            await aan.start()<br/>            botme = await aan.get_me()<br/>            await aan(functions.channels.JoinChannelRequest(channel=""))<br/>            await aan(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await aan(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await aan(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await aan(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 17 not Found")<br/>        session_name = "startup"<br/>        aan = TelegramClient(session_name, a, b)<br/>        try:<br/>            await aan.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if eieee:<br/>        session_name = str(eieee)<br/>        print("String 18 Found")<br/>        ake = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 18")<br/>            await ake.start()<br/>            botme = await ake.get_me()<br/>            await ake(functions.channels.JoinChannelRequest(channel=""))<br/>            await ake(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await ake(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await ake(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await ake(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 18 not Found")<br/>        session_name = "startup"<br/>        ake = TelegramClient(session_name, a, b)<br/>        try:<br/>            await ake.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if nieee:<br/>        session_name = str(nieee)<br/>        print("String 19 Found")<br/>        eel = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 19")<br/>            await eel.start()<br/>            botme = await eel.get_me()<br/>            await eel(functions.channels.JoinChannelRequest(channel=""))<br/>            await eel(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await eel(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await eel(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await eel(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 19 not Found")<br/>        session_name = "startup"<br/>        eel = TelegramClient(session_name, a, b)<br/>        try:<br/>            await idk.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if gandu:<br/>        session_name = str(gandu)<br/>        print("String 20 Found")<br/>        khu = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 20")<br/>            await khu.start()<br/>            botme = await khu.get_me()<br/>            await khu(functions.channels.JoinChannelRequest(channel=""))<br/>            await khu(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await khu(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await khu(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await khu(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 20 not Found")<br/>        session_name = "startup"<br/>        khu = TelegramClient(session_name, a, b)<br/>        try:<br/>            await khu.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if ekish:<br/>        session_name = str(ekish)<br/>        print("String 21 Found")<br/>        shi = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 21")<br/>            await shi.start()<br/>            botme = await shi.get_me()<br/>            await shi(functions.channels.JoinChannelRequest(channel=""))<br/>            await shi(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await shi(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await shi(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await shi(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 21 not Found")<br/>        session_name = "startup"<br/>        shi = TelegramClient(session_name, a, b)<br/>        try:<br/>            await shi.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if baish:<br/>        session_name = str(baish)<br/>        print("String 22 Found")<br/>        yaa = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 22")<br/>            await yaa.start()<br/>            botme = await yaa.get_me()<br/>            await yaa(functions.channels.JoinChannelRequest(channel=""))<br/>            await yaa(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await yaa(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await yaa(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await yaa(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 22 not Found")<br/>        session_name = "startup"<br/>        yaa = TelegramClient(session_name, a, b)<br/>        try:<br/>            await yaa.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if teish:<br/>        session_name = str(teish)<br/>        print("String 23 Found")<br/>        dav = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 23")<br/>            await dav.start()<br/>            botme = await dav.get_me()<br/>            await dav(functions.channels.JoinChannelRequest(channel=""))<br/>            await dav(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await dav(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await dav(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await dav(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 23 not Found")<br/>        session_name = "startup"<br/>        dav = TelegramClient(session_name, a, b)<br/>        try:<br/>            await dav.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if tfour:<br/>        session_name = str(tfour)<br/>        print("String 24 Found")<br/>        raj = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 24")<br/>            await raj.start()<br/>            botme = await raj.get_me()<br/>            await raj(functions.channels.JoinChannelRequest(channel=""))<br/>            await raj(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await raj(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await raj(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await raj(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 24 not Found")<br/>        session_name = "startup"<br/>        raj = TelegramClient(session_name, a, b)<br/>        try:<br/>            await raj.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if tfive:<br/>        session_name = str(tfive)<br/>        print("String 25 Found")<br/>        put = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 25")<br/>            await put.start()<br/>            botme = await put.get_me()<br/>            await put(functions.channels.JoinChannelRequest(channel=""))<br/>            await put(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await put(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await put(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await put(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 25 not Found")<br/>        session_name = "startup"<br/>        put = TelegramClient(session_name, a, b)<br/>        try:<br/>            await put.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if tsix:<br/>        session_name = str(tsix)<br/>        print("String 26 Found")<br/>        eag = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 26")<br/>            await eag.start()<br/>            botme = await eag.get_me()<br/>            await eag(functions.channels.JoinChannelRequest(channel=""))<br/>            await eag(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await eag(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await eag(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await eag(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 26 not Found")<br/>        session_name = "startup"<br/>        eag = TelegramClient(session_name, a, b)<br/>        try:<br/>            await eag.start()<br/>        except Exception as e:<br/>            pass<br/>   <br/>    if tseven:<br/>        session_name = str(tseven)<br/>        print("String 27 Found")<br/>        ydk = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 27")<br/>            await gle.start()<br/>            await gle(functions.channels.JoinChannelRequest(channel=""))<br/>            await gle(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await gle(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await gle(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await gle(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await gle.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 27 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        gle = TelegramClient(session_name, a, b)<br/>        try:<br/>            await gle.start()<br/>        except Exception as e:<br/>            pass<div></div>    if teight:<br/>        session_name = str(teight)<br/>        print("String 28 Found")<br/>        wal = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 28")<br/>            await wal.start()<br/>            await wal(functions.channels.JoinChannelRequest(channel=""))<br/>            await wal(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await wal(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await wal(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await wal(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await wal.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 28 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        wal = TelegramClient(session_name, a, b)<br/>        try:<br/>            await wal.start()<br/>        except Exception as e:<br/>            pass<div></div>    if tnine:<br/>        session_name = str(tnine)<br/>        print("String 29 Found")<br/>        aaa = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 29")<br/>            await aaa.start()<br/>            await aaa(functions.channels.JoinChannelRequest(channel=""))<br/>            await aaa(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await aaa(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await aaa(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await aaa(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await aaa.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 29 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        aaa = TelegramClient(session_name, a, b)<br/>        try:<br/>            await aaa.start()<br/>        except Exception as e:<br/>            pass<div></div>    if thirty:<br/>        session_name = str(thirty)<br/>        print("String 30 Found")<br/>        boy = TelegramClient(StringSession(session_name), a, b)<br/>        try:<br/>            print("Booting Up The Client 30")<br/>            await boy.start()<br/>            await boy(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await boy(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await boy(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await boy(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            await boy(functions.channels.JoinChannelRequest(channel="@ABOUT_HYPER"))<br/>            botme = await boy.get_me()<br/>            botid = telethon.utils.get_peer_id(botme)<br/>            SMEX_USERS.append(botid)<br/>        except Exception as e:<br/>            print(e)<br/>            pass<br/>    else:<br/>        print("Session 30 not Found")<br/>        pass<br/>        session_name = "startup"<br/>        boy = TelegramClient(session_name, a, b)<br/>        try:<br/>            await boy.start()<br/>        except Exception as e:<br/>            pass<br/>                  <br/>   <br/>loop = asyncio.get_event_loop()<br/>loop.run_until_complete(start_yukki())       <div></div>async def gifspam(e, smex):<br/>    try:<br/>        await e.client(<br/>            functions.messages.SaveGifRequest(<br/>                id=types.InputDocument(<br/>                    id=sandy.media.document.id,<br/>                    access_hash=smex.media.document.access_hash,<br/>                    file_reference=smex.media.document.file_reference,<br/>                ),<br/>                unsave=True,<br/>            )<br/>        )<br/>    except Exception as e:<br/>        pass<div></div><div></div>@idk.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*join")) <br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*join")) <br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*join")) <br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*join")) <br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*join")) <br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\.join"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*join"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*join"))<div></div><br/>async def _(e):<br/>    usage = "𝗠𝗼𝗱𝘂𝗹𝗲 𝗡𝗮𝗺𝗲 = 𝗝𝗼𝗶𝗻\n\nCommand:\n\n.join <Public Channel or Group Link/Username>"<br/>    if e.sender_id in SMEX_USERS:<br/>        yukki = ("".join(e.text.split(maxsplit=1)[1:])).split(" ", 1)<br/>        if len(e.text) > 6:<br/>            bc = yukki[0]<br/>            text = "Joining..."<br/>            event = await e.reply(text, parse_mode=None, link_preview=None )<br/>            try:<br/>                await e.client(functions.channels.JoinChannelRequest(channel=bc))<br/>                await event.edit("Succesfully Joined")<br/>            except Exception as e:<br/>                await event.edit(str(e))   <br/>        else:<br/>            await e.reply(usage, parse_mode=None, link_preview=None )<br/>            <br/>@idk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*pjoin")) <br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*pjoin"))<div></div><div></div>async def _(e):<br/>    usage = "𝗠𝗼𝗱𝘂𝗹𝗲 𝗡𝗮𝗺𝗲 = 𝗣𝗿𝗶𝘃𝗮𝘁𝗲 𝗝𝗼𝗶𝗻\n\nCommand:\n\n.pjoin <Private Channel or Group's access hash>\n\nExample :\nLink = https://t.me/joinchat/HGYs1wvsPUplMmM1\n\n.pjoin HGYs1wvsPUplMmM1"<br/>    if e.sender_id in SMEX_USERS:<br/>        yukki = ("".join(e.text.split(maxsplit=1)[1:])).split(" ", 1)<br/>        if len(e.text) > 7:<br/>            bc = yukki[0]<br/>            text = "Joining...."<br/>            event = await e.reply(text, parse_mode=None, link_preview=None )<br/>            try:<br/>                await e.client(ImportChatInviteRequest(bc))<br/>                await event.edit("Succesfully Joined")<br/>            except Exception as e:<br/>                await event.edit(str(e))   <br/>        else:<br/>            await e.reply(usage, parse_mode=None, link_preview=None )<br/>            <br/>        <br/>@idk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*leave"))<div></div><br/>async def _(e):<br/>    usage = "𝗠𝗼𝗱𝘂𝗹𝗲 𝗡𝗮𝗺𝗲 = 𝗟𝗲𝗮𝘃𝗲\n\nCommand:\n\n.leave <Channel or Chat ID>"<br/>    if e.sender_id in SMEX_USERS:<br/>        yukki = ("".leave(e.text.split(maxsplit=1)[1:])).split(" ", 1)<br/>        if len(e.text) > 7:<br/>            bc = yukki[0]<br/>            bc = int(bc)<br/>            text = "𝐎𝐊 𝐅𝐈𝐍𝐄 𝐌𝐀𝐍 𝐀𝐑𝐊𝐇𝐀𝐌𝐱𝐆𝐎𝐃 𝐁𝐎𝐓 𝐋𝐄𝐀𝐕𝐈𝐍𝐆....."<br/>            event = await e.reply(text, parse_mode=None, link_preview=None )<br/>            try:<br/>                await event.client(LeaveChannelRequest(bc))<br/>                await event.edit("Succesfully Left")<br/>            except Exception as e:<br/>                await event.edit(str(e))   <br/>        else:<br/>            await e.reply(usage, parse_mode=None, link_preview=None )<br/>            <br/>                <div></div>@idk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*delayspam"))<div></div><br/>async def spam(e):<br/>    usage = "𝗠𝗼𝗱𝘂𝗹𝗲 𝗡𝗮𝗺𝗲 = 𝗗𝗲𝗹𝗮𝘆𝗦𝗽𝗮𝗺\n\nCommand:\n\n.delayspam <sleep time> <count> <message to spam>\n\n.delayspam <sleep time> <count> <reply to a message>\n\nCount and Sleeptime must be a integer."<br/>    if e.sender_id in SMEX_USERS:<br/>        if e.text[0].isalpha() and e.text[0] in ("/", "#", "@", "!"):<br/>            return await e.reply(usage, parse_mode=None, link_preview=None )<br/>        smex = await e.get_reply_message()<br/>        yukki = "".join(e.text.split(maxsplit=1)[1:]).split(" ", 2)<br/>        yukkisexy = yukki[1:]<br/>        if len(yukkisexy) == 2:<br/>            message = str(yukkisexy[1])<br/>            counter = int(yukkisexy[0])<br/>            sleeptime = float(yukki[0])<br/>            for _ in range(counter):<br/>                async with e.client.action(e.chat_id, "typing"):<br/>                    if e.reply_to_msg_id:<br/>                        await smex.reply(message)<br/>                    else:<br/>                        await e.client.send_message(e.chat_id, message)<br/>                    await asyncio.sleep(sleeptime)<br/>        elif e.reply_to_msg_id and smex.media:  <br/>            counter = int(yukkisexy[0])<br/>            sleeptime = float(yukki[0])<br/>            for _ in range(counter):<br/>                async with e.client.action(e.chat_id, "document"):<br/>                    smex = await e.client.send_file(e.chat_id, smex, caption=smex.text)<br/>                    await gifspam(e, smex) <br/>                await asyncio.sleep(sleeptime)<br/>        elif e.reply_to_msg_id and smex.text:<br/>            message = smex.text<br/>            counter = int(yukkisexy[0])<br/>            sleeptime = float(yukki[0])<br/>            for _ in range(counter):<br/>                async with e.client.action(e.chat_id, "typing"):<br/>                    await e.client.send_message(e.chat_id, message)<br/>                    await asyncio.sleep(sleeptime)<br/>        else:<br/>            await e.reply(usage, parse_mode=None, link_preview=None )<div></div><br/>@idk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*bigspam"))<div></div><br/>async def spam(e):<br/>    usage = "𝗠𝗼𝗱𝘂𝗹𝗲 𝗡𝗮𝗺𝗲 = 𝗕𝗶𝗴𝗦𝗽𝗮𝗺\n\nCommand:\n\n.bigspam <count> <message to spam>\n\n.bigspam <count> <reply to a message>\n\nCount must be a integer."<br/>    if e.sender_id in SMEX_USERS:<br/>        if e.text[0].isalpha() and e.text[0] in ("/", "#", "@", "!"):<br/>            return await e.reply(usage, parse_mode=None, link_preview=None )<br/>        yukki = ("".join(e.text.split(maxsplit=1)[1:])).split(" ", 1)<br/>        smex = await e.get_reply_message()<br/>        if len(yukki) == 2:<br/>            message = str(yukki[1])<br/>            counter = int(yukki[0])<br/>            for _ in range(counter):<br/>                async with e.client.action(e.chat_id, "typing"):<br/>                    if e.reply_to_msg_id:<br/>                        await smex.reply(message)<br/>                    else:<br/>                        await e.client.send_message(e.chat_id, message)<br/>                    await asyncio.sleep(0.1)<br/>        elif e.reply_to_msg_id and smex.media:  <br/>            counter = int(yukki[0])<br/>            for _ in range(counter):<br/>                async with e.client.action(e.chat_id, "document"):<br/>                    smex = await e.client.send_file(e.chat_id, smex, caption=smex.text)<br/>                    await gifspam(e, smex) <br/>                await asyncio.sleep(0.1)  <br/>        elif e.reply_to_msg_id and smex.text:<br/>            message = smex.text<br/>            counter = int(yukki[0])<br/>            for _ in range(counter):<br/>                async with e.client.action(e.chat_id, "typing"):<br/>                    await e.client.send_message(e.chat_id, message)<br/>                    await asyncio.sleep(0.3)<br/>        else:<br/>            await e.reply(usage, parse_mode=None, link_preview=None )<div></div><br/>@idk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*raid"))<br/>async def spam(e):<br/>    usage = "𝗠𝗼𝗱𝘂𝗹𝗲 𝗡𝗮𝗺𝗲 = 𝗥𝗮𝗶𝗱\n\nCommand:\n\n.raid <count> <Username of User>\n\n.raid <count> <reply to a User>\n\nCount must be a integer."<br/>    if e.sender_id in SMEX_USERS:<br/>        if e.text[0].isalpha() and e.text[0] in ("/", "#", "@", "!"):<br/>            return await e.reply(usage, parse_mode=None, link_preview=None )<br/>        yukki = ("".join(e.text.split(maxsplit=1)[1:])).split(" ", 1)<br/>        smex = await e.get_reply_message()<br/>        if len(yukki) == 2:<br/>            message = str(yukki[1])<br/>            print(message)<br/>            a = await e.client.get_entity(message)<br/>            g = a.id<br/>            c = a.first_name<br/>            username = f"[{c}](tg://user?id={g})"<br/>            counter = int(yukki[0])<br/>            for _ in range(counter):<br/>                reply = random.choice(RAID)<br/>                caption = f"{username} {reply}"<br/>                async with e.client.action(e.chat_id, "typing"):<br/>                    await e.client.send_message(e.chat_id, caption)<br/>                    await asyncio.sleep(0.3)<br/>        elif e.reply_to_msg_id:             <br/>            a = await e.get_reply_message()<br/>            b = await e.client.get_entity(a.sender_id)<br/>            g = b.id<br/>            c = b.first_name<br/>            counter = int(yukki[0])<br/>            username = f"[{c}](tg://user?id={g})"<br/>            for _ in range(counter):<br/>                reply = random.choice(RAID)<br/>                caption = f"{username} {reply}"<br/>                async with e.client.action(e.chat_id, "typing"):<br/>                    await e.client.send_message(e.chat_id, caption)<br/>                    await asyncio.sleep(0.3)<br/>        else:<br/>            await e.reply(usage, parse_mode=None, link_preview=None )<div></div><div></div>@idk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*repo"))<br/>async def spam(e):<br/>    usage = "𝗠𝗼𝗱𝘂𝗹𝗲 𝗡𝗮𝗺𝗲 =     eagle\n\nCommand:\n\n.eagle <count> <Username of User>\n\n.eagle <count> <reply to a User>\n\nCount must be a integer."<br/>    if e.sender_id in SMEX_USERS:<br/>        if e.text[0].isalpha() and e.text[0] in ("/", "#", "@", "!"):<br/>            return await e.reply(usage, parse_mode=None, link_preview=None )<br/>        yukki = ("".join(e.text.split(maxsplit=1)[1:])).split(" ", 1)<br/>        smex = await e.get_reply_message()<br/>        if len(yukki) == 2:<br/>            message = str(yukki[1])<br/>            print(message)<br/>            a = await e.client.get_entity(message)<br/>            g = a.id<br/>            c = a.first_name<br/>            username = f"[{c}](tg://user?id={g})"<br/>            counter = int(yukki[0])<br/>            for _ in range(counter):<br/>                reply = random.choice(EAGLE)<br/>                caption = f"{username} {reply}"<br/>                async with e.client.action(e.chat_id, "typing"):<br/>                    await e.client.send_message(e.chat_id, caption)<br/>                    await asyncio.sleep(0.2)<br/>        elif e.reply_to_msg_id:             <br/>            a = await e.get_reply_message()<br/>            b = await e.client.get_entity(a.sender_id)<br/>            g = b.id<br/>            c = b.first_name<br/>            counter = int(yukki[0])<br/>            username = f"[{c}](tg://user?id={g})"<br/>            for _ in range(counter):<br/>                reply = random.choice(EAGLE)<br/>                caption = f"{username} {reply}"<br/>                async with e.client.action(e.chat_id, "typing"):<br/>                    await e.client.send_message(e.chat_id, caption)<br/>                    await asyncio.sleep(0.2)<br/>        else:<br/>            await e.reply(usage, parse_mode=None, link_preview=None )<div></div><div></div><br/>@idk.on(events.NewMessage(incoming=True))<br/>@ydk.on(events.NewMessage(incoming=True))<br/>@wdk.on(events.NewMessage(incoming=True))<br/>@hdk.on(events.NewMessage(incoming=True))<br/>@sdk.on(events.NewMessage(incoming=True))<br/>@adk.on(events.NewMessage(incoming=True))<br/>@bdk.on(events.NewMessage(incoming=True))<br/>@cdk.on(events.NewMessage(incoming=True))<br/>@edk.on(events.NewMessage(incoming=True))<br/>@ddk.on(events.NewMessage(incoming=True))<br/>@vkk.on(events.NewMessage(incoming=True))<br/>@kkk.on(events.NewMessage(incoming=True))<br/>@lkk.on(events.NewMessage(incoming=True))<br/>@mkk.on(events.NewMessage(incoming=True))<br/>@sid.on(events.NewMessage(incoming=True))<br/>@shy.on(events.NewMessage(incoming=True))<br/>@aan.on(events.NewMessage(incoming=True))<br/>@ake.on(events.NewMessage(incoming=True))<br/>@eel.on(events.NewMessage(incoming=True))<br/>@khu.on(events.NewMessage(incoming=True))<br/>@shi.on(events.NewMessage(incoming=True))<br/>@yaa.on(events.NewMessage(incoming=True))<br/>@dav.on(events.NewMessage(incoming=True))<br/>@raj.on(events.NewMessage(incoming=True))<br/>@put.on(events.NewMessage(incoming=True))<br/>@eag.on(events.NewMessage(incoming=True))<br/>@gle.on(events.NewMessage(incoming=True))<br/>@wal.on(events.NewMessage(incoming=True))<br/>@aaa.on(events.NewMessage(incoming=True))<br/>@boy.on(events.NewMessage(incoming=True))<div></div><br/>async def _(event):<br/>    global que<br/>    queue = que.get(event.sender_id)<br/>    if not queue:<br/>        return<br/>    async with event.client.action(event.chat_id, "typing"):<br/>        await asyncio.sleep(0.2)<br/>    async with event.client.action(event.chat_id, "typing"):<br/>        await event.client.send_message(<br/>            entity=event.chat_id,<br/>            message="""{}""".format(random.choice(RRAID)),<br/>            reply_to=event.message.id,<br/>        )           <br/>            <br/>            <br/>@idk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*replyraid"))<div></div><div></div>async def _(e):<br/>    global que<br/>    usage = "𝗠𝗼𝗱𝘂𝗹𝗲 𝗡𝗮𝗺𝗲 = 𝗥𝗲𝗽𝗹𝘆𝗥𝗮𝗶𝗱\n\nCommand:\n\n.replyraid <Username of User>\n\n.replyraid <reply to a User>"<br/>    if e.sender_id in SMEX_USERS:<br/>        if e.text[0].isalpha() and e.text[0] in ("/", "#", "@", "!"):<br/>            return await e.reply(usage, parse_mode=None, link_preview=None )<br/>        yukki = ("".join(e.text.split(maxsplit=1)[1:])).split(" ", 1)<br/>        smex = await e.get_reply_message()<br/>        if len(e.text) > 11:<br/>            message = str(yukki[0])<br/>            a = await e.client.get_entity(message)<br/>            g = a.id<br/>            que[g] = []<br/>            qeue = que.get(g)<br/>            appendable = [g]<br/>            qeue.append(appendable)<br/>            text = "OK SIR WE WILL FUCK THIS BITCH YOU ENJOY THE SHOW..."<br/>            await e.reply(text, parse_mode=None, link_preview=None )<br/>        elif e.reply_to_msg_id:             <br/>            a = await e.get_reply_message()<br/>            b = await e.client.get_entity(a.sender_id)<br/>            g = b.id<br/>            que[g] = []<br/>            qeue = que.get(g)<br/>            appendable = [g]<br/>            qeue.append(appendable)<br/>            text = "OK SIR WE WILL FUCK THIS BITCH YOU ENJOY THE SHOW..."<br/>            await e.reply(text, parse_mode=None, link_preview=None )<br/>        else:<br/>            await e.reply(usage, parse_mode=None, link_preview=None )<div></div>            <br/>@idk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*dreplyraid"))<div></div><br/>async def _(e):<br/>    global que<br/>    usage = "𝗠𝗼𝗱𝘂𝗹𝗲 𝗡𝗮𝗺𝗲 = 𝗗𝗲𝗮𝗰𝘁𝗶𝘃𝗮𝘁𝗲 𝗥𝗲𝗽𝗹𝘆𝗥𝗮𝗶𝗱\n\nCommand:\n\n.dreplyraid <Username of User>\n\n.dreplyraid <reply to a User>"<br/>    if e.sender_id in SMEX_USERS:<br/>        if e.text[0].isalpha() and e.text[0] in ("/", "#", "@", "!"):<br/>            return await e.reply(usage, parse_mode=None, link_preview=None )<br/>        yukki = ("".join(e.text.split(maxsplit=1)[1:])).split(" ", 1)<br/>        smex = await e.get_reply_message()<br/>        if len(e.text) > 12:<br/>            message = str(yukki[0])<br/>            a = await e.client.get_entity(message)<br/>            g = a.id<br/>            try:<br/>                queue = que.get(g)<br/>                queue.pop(0)<br/>            except Exception as f:<br/>                pass<br/>            text = "OK MAN WE WILL STOP NOW KALP GAYA HAI BECHARA..."<br/>            await e.reply(text, parse_mode=None, link_preview=None )<br/>        elif e.reply_to_msg_id:             <br/>            a = await e.get_reply_message()<br/>            b = await e.client.get_entity(a.sender_id)<br/>            g = b.id<br/>            try:<br/>                queue = que.get(g)<br/>                queue.pop(0)<br/>            except Exception as f:<br/>                pass<br/>            text = "OK MAN WE WILL STOP NOW KALP GAYA HAI BECHARA..."<br/>            await e.reply(text, parse_mode=None, link_preview=None )<br/>        else:<br/>            await e.reply(usage, parse_mode=None, link_preview=None )<br/>    <div></div><div></div><div></div><div></div>async def get_chatinfo(event):<br/>    chat = event.pattern_match.group(1)<br/>    chat_info = None<br/>    if chat:<br/>        try:<br/>            chat = int(chat)<br/>        except ValueError:<br/>            pass<br/>    if not chat:<br/>        if event.reply_to_msg_id:<br/>            replied_msg = await event.get_reply_message()<br/>            if replied_msg.fwd_from and replied_msg.fwd_from.channel_id is not None:<br/>                chat = replied_msg.fwd_from.channel_id<br/>        else:<br/>            chat = event.chat_id<br/>    try:<br/>        chat_info = await event.client(GetFullChatRequest(chat))<br/>    except:<br/>        try:<br/>            chat_info = await event.client(GetFullChannelRequest(chat))<br/>        except ChannelInvalidError:<br/>            await event.reply("`Invalid channel/group`")<br/>            return None<br/>        except ChannelPrivateError:<br/>            await event.reply(<br/>                "`This is a private channel/group or I am banned from there`"<br/>            )<br/>            return None<br/>        except ChannelPublicGroupNaError:<br/>            await event.reply("`Channel or supergroup doesn't exist`")<br/>            return None<br/>        except (TypeError, ValueError):<br/>            await event.reply("`Invalid channel/group`")<br/>            return None<br/>    return chat_info<div></div><br/>def user_full_name(user):<br/>    names = [user.first_name, user.last_name]<br/>    names = [i for i in list(names) if i]<br/>    full_name = " ".join(names)<br/>    return full_name<div></div><br/>@idk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*add"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*add"))<div></div><br/>async def get_users(event):<br/>    sender = await event.get_sender()<br/>    me = await event.client.get_me()<br/>    if not sender.id == me.id:<br/>        mafia = await event.edit(f"`processing...`")<br/>    else:<br/>        h1m4n5hu0p = await get_chatinfo(event)<br/>        chat = await event.get_chat()<br/>        <br/>    if event.is_private:<br/>        return await event.edit("`Sorry, Cant add users here`")<br/>    s = 0<br/>    f = 0<br/>    error = "None"<div></div>    await event.edit("**TerminalStatus**\n\n`Collecting Users.......`")<br/>    async for user in event.client.iter_participants(h1m4n5hu0p.full_chat.id):<br/>        try:<br/>            if error.startswith("Too"):<br/>                return await event.edit(<br/>                    f"**Terminal Finished With Error**\n(`May Got Limit Error from telethon Please try agin Later`)\n**Error** : \n`{error}`\n\n• Invited `{s}` people \n• Failed to Invite `{f}` people"<br/>                )<br/>            await event.client(<br/>                functions.channels.InviteToChannelRequest(channel=chat, users=[user.id])<br/>            )<br/>            s = s + 1<br/>            await event.edit(<br/>                f"**Terminal Running...**\n\n• Invited `{s}` people \n• Failed to Invite `{f}` people\n\n**× LastError:** `{error}`"<br/>            )<br/>        except Exception as e:<br/>            error = str(e)<br/>            f = f + 1<br/>    return await event.edit(<br/>        f"**Terminal Finished** \n\n• Successfully Invited `{s}` people \n• failed to invite `{f}` people"<br/>    )<div></div><div></div><div></div><div></div><div></div>@idk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*ping"))<div></div>async def ping(e):<br/>    if e.sender_id in SMEX_USERS:<br/>        start = datetime.now()<br/>        text = "𝐀𝐑𝐊𝐇𝐀𝐌𝐱𝐆𝐎𝐃 𝐒𝐏𝐀𝐌𝐁𝐎𝐓 𝐎𝐏 🥵🔥!"<br/>        event = await e.reply(text, parse_mode=None, link_preview=None )<br/>        end = datetime.now()<br/>        ms = (end-start).microseconds / 1000<br/>        await event.edit(f"𝗣𝗢𝗡𝗚!\n`{ms}` ms{ALIVE_NAME} ")<div></div><div></div>        <br/>        <div></div>@idk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*restart"))<br/>async def restart(e):<br/>    if e.sender_id in SMEX_USERS:<br/>        text = "2𝐌𝐈𝐍 𝐖𝐀𝐈𝐓 𝐏𝐑𝐎 𝐁𝐎𝐓 𝐑𝐄𝐁𝐎𝐎𝐓𝐈𝐍𝐆...\n\nNow Wait Till Piro Bot Is Rebooting..."<br/>        await e.reply(text, parse_mode=None, link_preview=None )<br/>        try:<br/>            await idk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await ydk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await wdk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await hdk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await sdk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await adk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await bdk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await cdk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await ddk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await edk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await vkk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await kkk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await lkk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await mkk.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await sid.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await shy.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await aan.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await ake.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await eel.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await khu.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await shi.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await yaa.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await dav.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await raj.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await put.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await eag.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await gle.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await wal.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await aaa.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        try:<br/>            await boy.disconnect()<br/>        except Exception as e:<br/>            pass<br/>        os.execl(sys.executable, sys.executable, *sys.argv)<br/>        quit()<div></div>        <br/>        <br/>        <br/>        <br/>        <br/>@idk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@ydk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@wdk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@hdk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@sdk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@adk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@bdk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@cdk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@edk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@ddk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@vkk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@kkk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@lkk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@mkk.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@sid.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@shy.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@aan.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@ake.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@eel.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@khu.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@shi.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@yaa.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@dav.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@raj.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@put.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@eag.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@gle.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@wal.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@aaa.on(events.NewMessage(incoming=True, pattern=r"\*help"))<br/>@boy.on(events.NewMessage(incoming=True, pattern=r"\*help"))<div></div>async def help(e):<br/>    if e.sender_id in SMEX_USERS:<br/>       text = "⛓𝗔𝘃𝗮𝗶𝗹𝗮𝗯𝗹𝗲 𝗖𝗼𝗺𝗺𝗮𝗻𝗱𝘀⛓\n\n⚜𝙐𝙩𝙞𝙡𝙨 𝘾𝙤𝙢𝙢𝙖𝙣𝙙⚜:\n*ping\n*restart\n\n🔰𝙐𝙨𝙚𝙧𝙗𝙤𝙩 𝘾𝙤𝙢𝙢𝙖𝙣𝙙🔰:\n*join\n*pjoin\n*leave\n\n🛡𝙎𝙥𝙖𝙢 𝘾𝙤𝙢𝙢𝙖𝙣𝙙🛡:\n*delayspam\n*bigspam\n*raid\n*replyraid\n*dreplyraid\n\n\nIf You Dont Understand How To Use This Bot Then Dont Use Your Noob Mind Just Contact @YashOP_XD"<br/>       await e.reply(text, parse_mode=None, link_preview=None )<div></div>        <div></div>    <br/>        <br/>text = """<div></div>💥💥 𝘼𝙍𝙆𝙃𝘼𝙈𝙭𝙂𝙊𝘿 𝙎𝙋𝘼𝙈 𝘽𝙊𝙏 💥💥💥<br/>💥 𝐁𝐎𝐓 𝐁𝐘 𝐘𝐀𝐒𝐇 𝐀𝐍𝐃 𝐋𝐔𝐂𝐈𝐅𝐄𝐑 💥"""<div></div>print(text)<br/>print("")<br/>print("𝗔𝗥𝗞𝗛𝗔𝗠𝘅𝗚𝗢𝗗 𝗦𝗣𝗔𝗠 𝗕𝗢𝗧 𝗥𝗘𝗔𝗗𝗬 𝗙𝗢𝗥 𝗨𝗦𝗘 𝗖𝗛𝗘𝗖𝗞 𝗕𝗬 𝗗𝗢𝗜𝗡𝗚 *ping")<br/>if len(sys.argv) not in (1, 3, 4):<br/>    try:<br/>        idk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        ydk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        wdk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        hdk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        sdk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        adk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        bdk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        cdk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        edk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        ddk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        vkk.disconnect()<br/>    except Exception as e:<br/>        pass <br/>    try:<br/>        kkk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        lkk.disconnect()<br/>    except Exception as e:<br/>        pass <br/>    try:<br/>        mkk.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        sid.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        shy.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        aan.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        ake.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        eel.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        khu.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        shi.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        yaa.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        dav.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        raj.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        put.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        eag.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        gle.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        wal.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        aaa.disconnect()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        boy.disconnect()<br/>    except Exception as e:<br/>        pass<br/>else:<br/>    try:<br/>        idk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        ydk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        wdk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        hdk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        sdk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        adk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        bdk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        cdk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        edk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        ddk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        vkk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        kkk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        lkk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        mkk.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        sid.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        shy.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        aan.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        ake.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        eel.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        khu.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        shi.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        yaa.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        dav.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        raj.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        put.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        eag.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        gle.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        wal.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        aaa.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<br/>    try:<br/>        boy.run_until_disconnected()<br/>    except Exception as e:<br/>        pass<div></div></div>